"
#include <stdio.h>
#include <gauche.h>
#include <gauche/extend.h>
#include <gauche/class.h>
#include <gauche/uvector.h>
#include \"picohttpparser.h\"

SCM_CLASS_DECL(Scm_PhrRequestClass);
#define SCM_CLASS_PHR_REQUEST (&Scm_PhrRequestClass)
#define SCM_PHR_REQUEST(obj) ((ScmPhrRequest*)(obj))
#define SCM_PHR_REQUESTP(obj) (SCM_XTYPEP(obj, SCM_CLASS_PHR_REQUEST))

typedef struct ScmPhrRequestRec {
  SCM_HEADER;
  ScmObj buf, method, path, minor_version, headers;
} ScmPhrRequest;

SCM_CLASS_DECL(Scm_PhrResponseClass);
#define SCM_CLASS_PHR_RESPONSE (&Scm_PhrResponseClass)
#define SCM_PHR_RESPONSE(obj) ((ScmPhrResponse*)(obj))
#define SCM_PHR_RESPONSEP(obj) (SCM_XTYPEP(obj, SCM_CLASS_PHR_RESPONSE))

typedef struct ScmPhrResponseRec {
  SCM_HEADER;
  ScmObj buf, minor_version, status, msg, headers;
} ScmPhrResponse;

void Scm_Init_picohttpparser_glue(ScmModule*);
"

(define-cclass <phr-request> "ScmPhrRequest*" "Scm_PhrRequestClass" ()
  ((buf :type <top> :setter #f)
   (method :type <top> :setter #f)
   (path :type <top> :setter #f)
   (minor-version :type <top> :setter #f)
   (headers :type <top> :setter #f)
   ))

(define-cclass <phr-response> "ScmPhrResponse*" "Scm_PhrResponseClass" ()
  ((buf :type <top> :setter #f)
   (minor-version :type <top> :setter #f)
   (status :type <top> :setter #f)
   (msg :type <top> :setter #f)
   (headers :type <top> :setter #f)
   ))

"#define substring(start, len) Scm_MakeString(SCM_U8VECTOR_ELEMENTS(request->buf) + ((start) - (const char *)SCM_U8VECTOR_ELEMENTS(buf)), (len), -1, 0)"
(define-cproc phr-parse-request (buf::<u8vector> :optional (len::<int> (c "SCM_MAKE_INT(SCM_U8VECTOR_SIZE(buf))")) (last_len::<int> 0))
  (let* ((method::(const char *))
         (method_len::size_t)
         (path::(const char *))
         (path_len::size_t)
         (minor_version::int)
         (headers::(.array (struct phr_header) (101)))
         (num_headers::size_t 100)
         (request::ScmPhrRequest* NULL)
         (header_len::int)
         )
    (set! header_len
      (phr_parse_request
       (SCM_U8VECTOR_ELEMENTS buf) len
       (& method) (& method_len)
       (& path) (& path_len)
       (& minor_version)
       headers (& num_headers)
       last_len
       ))
    (when (>= header_len 0)
      (set! request (SCM_NEW ScmPhrRequest))
      (SCM_SET_CLASS request SCM_CLASS_PHR_REQUEST)
      (set! (-> request buf) (Scm_U8VectorCopy buf 0 header_len))
      (set! (-> (SCM_UVECTOR (-> request buf)) immutable) 1)
      (set! (-> request method) (substring method method_len))
      (set! (-> request path) (substring path path_len))
      (set! (-> request minor_version) (SCM_MAKE_INT minor_version))
      (if (not num_headers)
        (set! (-> request headers) SCM_NIL)
        (let* ((h::(struct phr_header))
               (hp::(struct phr_header*))
               (initial_pair::ScmPair)
               (i::int)
               (p (SCM_OBJ (& initial_pair)))
               (tmp)
               (multiline_count::int 0)
               (multiline_size::int (ref (aref headers 0) value_len))
               )
          (set! (SCM_CDR (& initial_pair)) SCM_NIL)
          (set! (ref (aref headers num_headers) name_len) 1)
          (dotimes (i num_headers)
            (if (ref (aref headers (+ i 1)) name_len)
              (begin
                (if (not multiline_count)
                  (begin
                    (set! tmp
                      (Scm_Cons
                       (Scm_Cons
                        (substring (ref (aref headers i) name) (ref (aref headers i) name_len))
                        (substring (ref (aref headers i) value) (ref (aref headers i) value_len)))
                       SCM_NIL))
                    (set! (SCM_CDR p) tmp)
                    (set! p tmp)
                    )
                  (begin
                    (let* ((multiline_buf::char* (SCM_NEW_ATOMIC2 (.type char*) (+ multiline_size 1)))
                           (multiline_bufp::char* multiline_buf))
                      (for ((set! hp (+ headers (- i multiline_count)))
                            (not (== hp (+ headers i 1)))
                            (pre++ hp))
                        (memcpy multiline_bufp (-> hp value) (-> hp value_len))
                        (+= multiline_bufp (-> hp value_len)))
                      (set! multiline_bufp 0)
                      (set! tmp
                        (Scm_Cons
                         (Scm_Cons
                          (substring
                           (ref (aref headers (- i multiline_count)) name)
                           (ref (aref headers (- i multiline_count)) name_len))
                          (Scm_MakeString multiline_buf multiline_size -1 0))
                         SCM_NIL))
                      (set! (SCM_CDR p) tmp)
                      (set! p tmp)
                      )))
                (set! multiline_count 0)
                (set! multiline_size (ref (aref headers (+ i 1)) value_len))
                )
              (begin
                (inc! multiline_count)
                (+= multiline_size (ref (aref headers (+ i 1)) value_len))
                )))
          (set! (-> request headers) (SCM_CDR (& initial_pair)))
          ))
      (return (SCM_OBJ request)))
    (unless (== header_len -2)
      (Scm_Error "parse error"))
    (return SCM_FALSE)))
"#undef substring"

"#define substring(start, len) Scm_MakeString(SCM_U8VECTOR_ELEMENTS(response->buf) + ((start) - (const char *)SCM_U8VECTOR_ELEMENTS(buf)), (len), -1, 0)"
(define-cproc phr-parse-response (buf::<u8vector> :optional (len::<int> (c "SCM_MAKE_INT(SCM_U8VECTOR_SIZE(buf))")) (last_len::<int> 0))
  (let* ((minor_version::int)
         (status::int)
         (msg::(const char *))
         (msg_len::size_t)
         (headers::(.array (struct phr_header) (100)))
         (num_headers::size_t 100)
         (response::ScmPhrResponse* NULL)
         (header_len::int)
         )
    (set! header_len
      (phr_parse_response
       (SCM_U8VECTOR_ELEMENTS buf) len
       (& minor_version)
       (& status)
       (& msg) (& msg_len)
       headers (& num_headers)
       last_len
       ))
    (when (>= header_len 0)
      (set! response (SCM_NEW ScmPhrResponse))
      (SCM_SET_CLASS response SCM_CLASS_PHR_RESPONSE)
      (set! (-> response buf) (Scm_U8VectorCopy buf 0 header_len))
      (set! (-> (SCM_UVECTOR (-> response buf)) immutable) 1)
      (set! (-> response minor_version) (SCM_MAKE_INT minor_version))
      (set! (-> response status) (SCM_MAKE_INT status))
      (set! (-> response msg) (substring msg msg_len))
      (let* ((h::(struct phr_header))
             (initial_pair::ScmPair)
             (p (SCM_OBJ (& initial_pair)))
             (tmp)
             )
        (set! (SCM_CDR (& initial_pair)) SCM_NIL)
        (dotimes (i num_headers)
          (set! h (aref headers i))
          (set! tmp
            (Scm_Cons
             (Scm_Cons
              (substring (ref h name) (ref h name_len))
              (substring (ref h value) (ref h value_len)))
             SCM_NIL))
          (set! (SCM_CDR p) tmp)
          (set! p tmp)
          )
        (set! (-> response headers) (SCM_CDR (& initial_pair)))
        )
      (return (SCM_OBJ response)))
    (unless (== header_len -2)
      (Scm_Error "parse error"))
    (return SCM_FALSE)))
"#undef substring"

(define-cfn Scm_Init_picohttpparser ()::void
  (let* ((mod::ScmModule*))
    (SCM_INIT_EXTENSION picohttpparser)
    (set! mod (SCM_MODULE (SCM_FIND_MODULE "picohttpparser" TRUE)))
    (Scm_Init_picohttpparser_glue mod)
    ))
