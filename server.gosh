(use gauche.collection)
(use gauche.fcntl)
(use gauche.net)
(use gauche.parameter)
(use gauche.partcont)
(use gauche.uvector)
(use dbd.pg)
(use dbi)
(use picohttpparser)
(use rfc.uri)
(use srfi-1)
(use srfi-19)
(use sxml.serializer)
(use text.html-lite :only (html-escape-string))
(use util.queue)
(use util.relation)
(use www.cgi)

(define *loop* (ev-default-loop 0))
(define *pool* ())
(define *pool-queue* (make <queue>))
(define *clean-up-callbacks* ())

(define (acquire-connection)
  (if (null? *pool*)
    (shift pc (enqueue! *pool-queue* pc))
    (car+cdr (pop! *pool*)))
  )

(define (release-connection conn)
  (if (queue-empty? *pool-queue*)
    (push! *pool* conn)
    ((dequeue! *pool-queue*) conn))
  )

(define (set-nonblocking! port-or-fd)
  (sys-fcntl port-or-fd F_SETFL (logior (sys-fcntl port-or-fd F_GETFL) O_NONBLOCK)))

(define (query->response-body query)
  (srl:sxml->html
   `(html
      (title "Result")
      (h1 "Result of query: " (code ,query))
      ,@(map relation->sxml (setup-query-result query)))))

(define (setup-query-result query)
  (shift pc
    (receive (conn watcher) #?=(acquire-connection)
      (define relations ())
      (define (callback loop watcher revents)
        (when (logtest revents EV_READ)
          (pq-consume-input conn)
          (unless (pq-is-busy conn)
            (let l ()
              (if-let1 result #?=(pq-get-result conn)
                (begin
                  (push! relations (pq-result->pg-result-set result))
                  (l))
                (begin
                  (ev-io-stop loop watcher)
                  (release-connection (cons conn watcher))
                  (pc (reverse! relations)))))
            )
          )
        (when (logtest revents EV_WRITE)
          (when (pq-flush conn)
            (ev-io-stop loop watcher)
            (ev-io-init watcher callback (pq-socket conn) EV_READ)
            (ev-io-start loop watcher)
            )
          )
        )

      (pq-send-query conn query)
      (ev-io-init watcher callback (pq-socket conn) (logior EV_READ EV_WRITE))
      (ev-io-start *loop* watcher)
      )))

(define (relation->sxml relation)
  `(table
     (thead (tr . ,(map (pa$ list 'th) (relation-column-names relation))))
     (tbody . ,(map ($ cons 'tr $ map (pa$ list 'td) $) relation)))
  )

(define (setup-response status body)
  (let* ((gmt (sys-gmtime (sys-time)))
         (date (sys-strftime "%a, %d %b %Y %H:%M:%S" gmt))
         (status-message (if (= status 200) "OK" "Not found"))
         )
    (string->u8vector
     #`"HTTP/1.1 ,status ,|status-message|\r\n\
        Connection: close\r\n\
        Date: ,date GMT\r\n\
        Content-Type: text/html\r\n\
        Content-Length: ,(string-size body)\r\n\r\n,body")
    )
  )

(define (request->response request)
  (case (string->symbol (~ request'method))
    ((GET)
     (receive (_ path query _) (uri-decompose-hierarchical (~ request'path))
       (let1 params (parameterize ((cgi-metavariables `(("REQUEST_METHOD" "GET")
                                                        ("QUERY_STRING" ,query))))
                      (cgi-parse-parameters))
         (cond ((string=? path "/")
                (values 200 () "<h1>It works!</h1>"))
               ((string=? path "/echo")
                (values 200 () (format "<pre>~a</pre>" (html-escape-string (u8vector->string (~ request'buf))))))
               ((string=? path "/chism")
                (if-let1 q (cgi-get-parameter "query" params)
                  (values 200 () (query->response-body q))
                  (values 200 () "<form method=\"GET\" action=\"/chism\"><input name=\"query\"><input type=\"submit\"></form>")))
               (else (values 404 () "Not found :|"))))))
    (else (values 404 () "Not found :|"))))

(define (echo-server port)
  (define loop *loop*)
  (define server (make-server-socket 'inet port :reuse-addr? #t))
  (define ss-watcher (ev-io-new))
  (define (process-request ct client input)
    (define (process-response response)
      (^(loop watcher revents)
        (let1 n (socket-send client response)
          (if (= n (u8vector-length response))
            (begin
              (format (standard-output-port) "bye(~S): ~S\n" (time-difference (current-time) ct) client)
              (flush (standard-output-port))
              (ev-io-stop loop watcher)
              (socket-close client))
            (set! response (uvector-alias <u8vector> response n))))))

    (let ((buf (make-u8vector 4096))
          (len 0)
          (last-len 0)
          )
      (^(loop watcher revents)
        (reset
          (let1 n (read-uvector! buf input len)
            (if (eof-object? n)
              (error "connection closed before finishing the header")
              (begin
                (set! last-len len)
                (inc! len n)
                (if-let1 request (phr-parse-request buf len last-len)
                  (receive (status _ body) (request->response request)
                    (let1 response (setup-response status body)
                      (ev-io-stop loop watcher)
                      (ev-io-init watcher (process-response response) (socket-fd client) EV_WRITE)
                      (ev-io-start loop watcher)
                      )
                    )
                  #f)
                )))))))

  (define (accept-handler loop watcher revents)
    (let* ((client (socket-accept server))
           (ct (current-time))
           (input (socket-input-port client :buffering #f))
           (cs-watcher (ev-io-new))
           )
      (format (standard-output-port) "accepted client: ~S\n" client)
      (flush (standard-output-port))
      (set-nonblocking! input)
      (ev-io-init cs-watcher (process-request ct client input) (socket-fd client) EV_READ)
      (ev-io-start loop cs-watcher)
      ))

  (ev-io-init
   ss-watcher
   accept-handler
   (socket-fd server)
   EV_READ)
  (ev-io-start loop ss-watcher)
  (ev-run loop))

(define (setup-connection)
  (let1 conn #?=(~ (dbi-connect "dbi:pg:dbname=chism")'%handle)
    (push! *clean-up-callbacks* (cut pq-finish conn))
    (push! *pool* (cons conn (ev-io-new)))
    )
  )

(define (finish . _)
  (for-each (cut apply <> ()) *clean-up-callbacks*))

(define (main args)
  (exit-handler finish)
  (set-signal-handler! SIGINT (^_ (exit)))
  (setup-connection)
  (echo-server (cadr args))
  0)
